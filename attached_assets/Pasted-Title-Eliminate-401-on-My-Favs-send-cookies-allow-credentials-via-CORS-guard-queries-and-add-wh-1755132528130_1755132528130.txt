Title
Eliminate 401 on My Favs: send cookies, allow credentials via CORS, guard queries, and add whoami debug

Overview
The My Favs request GET /api/cocktails?favoriteOnly=true is returning 401 in the IDE preview. We need to:
1) Force fetch() to include the session cookie on every request.
2) Configure CORS + session cookie attributes correctly for Replit‚Äôs HTTPS + iframe preview (cross‚Äësite).
3) Ensure the My Favs React Query only runs when the user is confirmed logged in.
4) Add a tiny /api/_whoami endpoint and route‚Äëlevel debug logs to verify sessions are set.
5) Make no assumptions about cookie domain; do NOT set cookie.domain.

Make the precise changes below.

Tasks

A) client/src/lib/queryClient.ts ‚Äî always send cookies, surface errors
Replace apiRequest with:

export async function apiRequest(path: string, options: RequestInit = {}) {
  const res = await fetch(path, {
    credentials: 'include', // üîë send session cookie
    headers: {
      'Content-Type': 'application/json',
      ...(options.headers || {}),
    },
    ...options,
  });

  // Bubble non-OK responses (keeps status code text in error)
  if (!res.ok) {
    const text = await res.text().catch(() => '');
    throw new Error(`${res.status} ${res.statusText} ${text}`);
  }
  return res.status === 204 ? null : res.json();
}

B) client/src/lib/favorites.ts ‚Äî interpret 401 as logged-out, keep optimistic toggle
Update to:

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

export function useFavoriteIds() {
  return useQuery({
    queryKey: ['/api/user/favorites'],
    queryFn: async () => {
      try {
        const res = await apiRequest('/api/user/favorites', { method: 'GET' });
        return { ids: (res?.ids ?? []) as string[], isAuthed: true };
      } catch {
        return { ids: [] as string[], isAuthed: false }; // 401 ‚Üí logged out
      }
    },
    staleTime: 60_000,
  });
}

export function useToggleFavorite() {
  const qc = useQueryClient();
  return useMutation({
    mutationFn: (cocktailId: string) =>
      apiRequest(`/api/user/favorites/${cocktailId}`, { method: 'POST' }),
    onMutate: async (cocktailId) => {
      await qc.cancelQueries({ queryKey: ['/api/user/favorites'] });
      const prev = qc.getQueryData(['/api/user/favorites']) as
        | { ids: string[]; isAuthed: boolean }
        | undefined;
      if (prev?.isAuthed) {
        const next = prev.ids.includes(cocktailId)
          ? prev.ids.filter((id) => id !== cocktailId)
          : [...prev.ids, cocktailId];
        qc.setQueryData(['/api/user/favorites'], { ids: next, isAuthed: true });
      }
      return { prev };
    },
    onError: (_e, _id, ctx) => {
      if (ctx?.prev) qc.setQueryData(['/api/user/favorites'], ctx.prev);
    },
    onSettled: () => {
      qc.invalidateQueries({ queryKey: ['/api/user/favorites'] });
      qc.invalidateQueries({ queryKey: ['/api/cocktails'] });
    },
  });
}

C) client/src/pages/CocktailList.tsx ‚Äî only fire My Favs when authed
Make sure:

const { data: favData } = useFavoriteIds();
const isAuthed = favData?.isAuthed === true;

const defaultQuery = useQuery({
  queryKey: ['/api/cocktails', {/* your normal params */}],
  queryFn: () => apiRequest('/api/cocktails', { method: 'GET' /* add qs if needed */ }),
  enabled: !isMyFavs,
});

const favQuery = useQuery({
  queryKey: ['/api/cocktails', { favoriteOnly: true }],
  queryFn: () => apiRequest('/api/cocktails?favoriteOnly=true', { method: 'GET' }),
  enabled: isMyFavs && isAuthed, // üîí no 401s when logged out
  retry: false,
});

// When My Favs on and not authed: show message (do not render error state)
if (isMyFavs && !isAuthed) {
  return (
    <div className="py-24 text-center text-muted-foreground">
      Login to view your favorite recipes
    </div>
  );
}

D) server/index.ts (or your main server bootstrap) ‚Äî CORS + sessions for cross-site cookies
1. Ensure this order: helmet ‚Üí cors ‚Üí app.options('*') ‚Üí trust proxy ‚Üí sessions ‚Üí passport ‚Üí routes.
2. Use these exact settings:

import cors from 'cors';
import session from 'express-session';
import helmet from 'helmet';
import passport from 'passport';

const allowlist = (process.env.CORS_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

app.use(helmet());

// CORS must allow credentials and your exact origins (no trailing slash)
app.use(cors({
  origin: (origin, cb) => {
    if (!origin) return cb(null, true);     // same-origin
    return cb(null, allowlist.includes(origin));
  },
  credentials: true,                         // üîë allow cookies
}));

app.options('*', cors({
  origin: (origin, cb) => {
    if (!origin) return cb(null, true);
    return cb(null, allowlist.includes(origin));
  },
  credentials: true,
}));

app.set('trust proxy', 1); // Replit/proxy aware

app.use(session({
  secret: process.env.SESSION_SECRET!,       // make sure this is set in Secrets
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: true,                            // HTTPS in Replit
    sameSite: 'none',                        // cross-site cookie in IDE iframe
    maxAge: 1000 * 60 * 60 * 24 * 7,
    // DO NOT set cookie.domain (let browser scope it automatically)
  },
}));

app.use(passport.initialize());
app.use(passport.session());

// (routes registered after sessions)

E) server/routes/debug.ts ‚Äî add a quick whoami + log middleware
Create a tiny debug router to verify sessions and origins.

import { Router } from 'express';
export const debugRouter = Router();

debugRouter.get('/_whoami', (req: any, res) => {
  res.json({
    user: req.user ? { id: req.user.id ?? req.user._id ?? req.user.uid } : null,
    hasSession: !!req.session,
  });
});

Add request logging ONLY around favoriteOnly to see what Origin & cookies we‚Äôre getting:

debugRouter.use((req, _res, next) => {
  if (req.path.startsWith('/cocktails')) {
    console.log('[DBG] favoriteOnly?', req.query.favoriteOnly, 'Origin:', req.headers.origin, 'Cookie present:', !!req.headers.cookie);
  }
  next();
});

Wire it in server/routes.ts (or wherever): app.use('/api', debugRouter);

F) Env: update CORS_ORIGINS in Replit Secrets
Ensure it includes EXACT dev and prod origins (no trailing slashes), e.g.
CORS_ORIGINS=https://20540bda-0240-4bab-8773-b4741e596295-00-2kktq7fdoy4tc.kirk.replit.dev,https://miximixology.com

Validation

1) Hard refresh, log in.
2) Open /api/_whoami in a new tab ‚Üí expect { user: { id: ... }, hasSession: true }.
3) Open /api/user/favorites ‚Üí 200 JSON (not 401).
4) Toggle ‚ÄúMy Favs‚Äù:
   - If logged in: Network shows /api/cocktails?favoriteOnly=true ‚Üí 200 with JSON array.
   - If logged out: No request fires; UI shows ‚ÄúLogin to view your favorite recipes‚Äù.
5) Check console logs from debugRouter for the favoriteOnly request ‚Äî you should see Cookie present: true when logged in.

Notes
- The CSP warning about replit-dev-banner.js is harmless and unrelated; do nothing.
- Do not set a cookie domain manually.
- If running locally over http://localhost, you may temporarily set cookie.secure=false and sameSite:'lax'. For Replit HTTPS preview, keep secure:true and sameSite:'none'.

