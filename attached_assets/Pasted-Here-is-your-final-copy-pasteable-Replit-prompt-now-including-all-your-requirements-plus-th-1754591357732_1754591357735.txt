Here is your **final, copy-pasteable Replit prompt** ‚Äî now including all your requirements **plus the OpenRouter.ai API reference** at the end to ensure Replit's agent has everything it needs to build this feature successfully.

---

### ‚úÖ COPY/PASTE THIS INTO REPLIT:

---

**Title:**
Implement AI-Powered Recipe Importer Using OpenRouter.ai (Replaces Bulk Upload Workflow)

---

**Overview:**
Create a new `/import` feature that replaces the idea of CSV-based bulk upload with an **AI-powered recipe importer** using OpenRouter.ai.

This page should allow users to enter a **YouTube link** or **standard webpage URL**, and the system will extract raw text, pass it to a model via OpenRouter, and convert it into a structured cocktail recipe.

This is intended to replace the unused bulk upload flow. The design of `client/src/pages/BulkUpload.tsx` can be referenced for layout only ‚Äî it was never fully implemented.

---

### üîå Use OpenRouter.ai (Not OpenAI)

Implement AI functionality via [OpenRouter.ai](https://openrouter.ai) using the following:

* **API URL:** `https://openrouter.ai/api/v1/chat/completions`
* **Authorization:** Header must be `Bearer ${process.env.OPENROUTER_API_KEY}`
* Store the `OPENROUTER_API_KEY` in Replit Secrets
* Set `Content-Type: application/json`

---

### üß† Phase 5: Model Routing Logic

Create a utility file: `src/lib/modelRouter.ts` to handle model selection per task:

```ts
export function getModelForTask(task: "generate" | "parse" | "normalize" | "summarize") {
  switch (task) {
    case "generate": return "mistralai/mixtral-8x7b";
    case "parse": return "meta-llama/llama-3-70b-instruct";
    case "normalize": return "nousresearch/nous-capybara-7b";
    case "summarize": return "meta-llama/llama-3-70b-instruct";
    default: return "mistralai/mixtral-8x7b";
  }
}
```

---

### üìÇ File Requirements

Build the following files/modules:

#### 1. `src/pages/ImportCocktail.tsx`

UI component for `/import` route. Must:

* Look like `BulkUpload.tsx` for layout
* Have input field for a YouTube or Web URL
* Button to trigger import
* Left panel: scraped/transcribed raw text
* Right panel: editable parsed data (name, description, ingredients, steps, tags)

#### 2. `src/lib/aiRequest.ts`

Handles sending prompt to OpenRouter using appropriate model (via `getModelForTask()`).

```ts
import { getModelForTask } from "./modelRouter";

export async function callOpenRouter(task: string, userContent: string, systemPrompt: string) {
  const model = getModelForTask(task);
  
  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model,
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userContent }
      ]
    })
  });

  if (!response.ok) throw new Error(`OpenRouter error: ${response.statusText}`);
  const data = await response.json();
  return data.choices?.[0]?.message?.content;
}
```

#### 3. `src/lib/scrapeURL.ts`

Use `axios` + `api.allorigins.win` to fetch website HTML, strip tags, and return plain text.

#### 4. `src/lib/extractYouTubeTranscript.ts`

Use `youtube-transcript` package to pull transcript from YouTube links and return joined text.

---

### üîÑ Measurement Normalization Rules

Normalize in post-processing:

* **oz/ml pairs:** use only the oz value.
* **ranges (e.g., 3‚Äì4 dashes):** use lower bound (e.g., 3).

---

### üåê API Endpoint Integration

Use the following backend endpoints from `server/routes.ts`:

* `POST /api/ingredients` ‚Äî to upsert new ingredients
* `GET /api/ingredients` ‚Äî for existing ingredients
* `POST /api/cocktails` ‚Äî to save the final recipe
* `POST /api/tags` ‚Äî to upsert new tags
* `GET /api/tags` ‚Äî for tag deduplication

These endpoints already handle creation and lookup of ingredients, cocktails, and tags.

---

### üí° Frontend UI Flow

1. User pastes a link
2. App:

   * Detects if it‚Äôs YouTube or webpage
   * Fetches raw transcript or scraped text
   * Calls OpenRouter with proper model (summarize/parse)
   * Gets structured JSON (name, ingredients, instructions, tags)
   * Normalizes data using Measurement Rules
   * Displays everything for user editing
3. On Save:

   * New ingredients ‚Üí `/api/ingredients`
   * New tags ‚Üí `/api/tags`
   * Final cocktail ‚Üí `/api/cocktails`

---

### üîß Refactor Notes

* Where applicable, remove or archive old CSV upload components.
* The reference design is `client/src/pages/BulkUpload.tsx` ‚Äî align layout and styling with that.
* There is no need to retain the `/bulk-upload` route.

---

### ‚úÖ Acceptance Criteria

* `/import` is styled like `BulkUpload.tsx`
* OpenRouter API is correctly integrated
* Model selection is task-based via `modelRouter.ts`
* Ingredient units are normalized
* Only AI-detected ingredients are shown; new ones flagged
* Tags are deduplicated
* Data submitted through proper API endpoints
* Stock images used by default
* No remaining references to CSV bulk upload logic

---

### üìò Reference: OpenRouter.ai API (Chat Completion)

**Endpoint:**
`POST https://openrouter.ai/api/v1/chat/completions`

**Headers:**

```http
Authorization: Bearer YOUR_API_KEY
Content-Type: application/json
```

**Request Body:**

```json
{
  "model": "mistralai/mixtral-8x7b",
  "messages": [
    { "role": "system", "content": "You are a helpful assistant." },
    { "role": "user", "content": "Extract a cocktail recipe from this text..." }
  ]
}
```

**Docs:**
[https://openrouter.ai/docs](https://openrouter.ai/docs)

---

You're ready to paste this directly into Replit to kick off the build. Let me know if you'd like a follow-up to test or QA the agent's output!
